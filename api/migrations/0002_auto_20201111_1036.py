# Generated by Django 3.1.2 on 2020-11-11 10:36

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('api', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('description', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='JobPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('description', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='MainQuest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('description', models.CharField(max_length=1000)),
                ('deadline', models.IntegerField(default=0)),
                ('accessLevel', models.IntegerField(default=0)),
                ('taskCount', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100)),
                ('surname', models.CharField(blank=True, max_length=100)),
                ('patronymic', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True, max_length=200)),
                ('email', models.EmailField(max_length=254)),
                ('photo', models.ImageField(upload_to='')),
                ('level', models.IntegerField(default=0)),
                ('money', models.IntegerField(default=0)),
                ('health', models.IntegerField(default=0)),
                ('energy', models.IntegerField(default=0)),
                ('quality', models.FloatField(default=0.0)),
                ('productivity', models.FloatField(default=0.0)),
                ('competitionCount', models.IntegerField(default=0)),
                ('winCompetitionCount', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('division_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.division')),
                ('jobPosition_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.jobposition')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('money', models.IntegerField(default=0)),
                ('health', models.IntegerField(default=0)),
                ('energy', models.IntegerField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('description', models.CharField(max_length=1000)),
                ('isTeamTask', models.BooleanField(default=False)),
                ('isHavingSubtask', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('parentTask_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.task')),
                ('reward_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.reward')),
            ],
        ),
        migrations.CreateModel(
            name='TaskType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('description', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('description', models.CharField(max_length=1000)),
            ],
        ),
        migrations.CreateModel(
            name='TaskUserStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=120)),
                ('isCompleted', models.BooleanField(default=False)),
                ('completeTime', models.DateTimeField()),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('done_at', models.DateTimeField()),
                ('task_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.task')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaskTypeQuest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('accessLevel', models.IntegerField(default=0)),
                ('task_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.task')),
            ],
        ),
        migrations.CreateModel(
            name='TaskTypeDaily',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deadline', models.IntegerField(default=0)),
                ('task_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.task')),
            ],
        ),
        migrations.AddField(
            model_name='task',
            name='taskType_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.tasktype'),
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=0)),
                ('quality', models.FloatField(default=0.0)),
                ('productivity', models.FloatField(default=0.0)),
                ('completedTests', models.IntegerField(default=0)),
                ('completedTasks', models.IntegerField(default=0)),
                ('completedQuests', models.IntegerField(default=0)),
                ('achievements', models.IntegerField(default=0)),
                ('competitions', models.IntegerField(default=0)),
                ('competitionWins', models.IntegerField(default=0)),
                ('profile_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.profile')),
            ],
        ),
        migrations.AddField(
            model_name='profile',
            name='userType_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.usertype'),
        ),
        migrations.CreateModel(
            name='MainQuestTree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('treeLevel', models.IntegerField(default=0)),
                ('treePosition', models.IntegerField(default=0)),
                ('childTask', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='childTask', to='api.task')),
                ('mainQuest_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.mainquest')),
                ('parentTask', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parentTask', to='api.task')),
                ('task_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='task_id', to='api.task')),
            ],
        ),
        migrations.CreateModel(
            name='MainQuestStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=120)),
                ('isCompleted', models.BooleanField(default=False)),
                ('completeTime', models.DateTimeField()),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('done_at', models.DateTimeField()),
                ('mainQuest_id', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.mainquest')),
                ('user_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='mainquest',
            name='reward_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.reward'),
        ),
        migrations.AddField(
            model_name='mainquest',
            name='tasks',
            field=models.ManyToManyField(through='api.MainQuestTree', to='api.Task'),
        ),
    ]
