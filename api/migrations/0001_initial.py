# Generated by Django 3.1.2 on 2020-11-25 19:55

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('email', models.EmailField(max_length=60, unique=True, verbose_name='email')),
                ('username', models.CharField(max_length=30, unique=True)),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='Зарегистрировался')),
                ('last_login', models.DateTimeField(auto_now=True, verbose_name='Был в сети')),
                ('is_admin', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('is_superuser', models.BooleanField(default=False)),
                ('userType', models.CharField(choices=[('admin', 'Администратор'), ('expert', 'Эксперт'), ('employee', 'Сотрудник'), ('gamemaster', 'Гейм-мастер')], default='employee', max_length=20, verbose_name='Тип пользователя')),
                ('name', models.CharField(blank=True, max_length=100, verbose_name='Имя')),
                ('surname', models.CharField(blank=True, max_length=100, verbose_name='Фамилия')),
                ('patronymic', models.CharField(blank=True, max_length=100, null=True, verbose_name='Отчество')),
                ('birthDate', models.DateField(blank=True, null=True, verbose_name='Дата рождения')),
                ('description', models.TextField(blank=True, max_length=200, null=True, verbose_name='О себе')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Фото')),
                ('level', models.IntegerField(default=0, verbose_name='Уровень')),
                ('money', models.IntegerField(default=0, verbose_name='Кол-во Валюты')),
                ('health', models.IntegerField(default=0, verbose_name='Кол-во HP')),
                ('energy', models.IntegerField(default=0, verbose_name='Кол-во Энергии')),
                ('quality', models.FloatField(default=0.0, verbose_name='Качество')),
                ('productivity', models.FloatField(default=0.0, verbose_name='Продуктивность')),
                ('competitionCount', models.IntegerField(default=0, verbose_name='Кол-во соревнований')),
                ('winCompetitionCount', models.IntegerField(default=0, verbose_name='Кол-во выиграных соревнований')),
            ],
            options={
                'verbose_name': 'пользователь',
                'verbose_name_plural': 'пользователи',
            },
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, verbose_name='Название ачивки')),
                ('description', models.CharField(max_length=1000, verbose_name='Описание ачивки')),
                ('image', models.ImageField(upload_to='', verbose_name='Картинка ачивки')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'достижение',
                'verbose_name_plural': 'достижения',
            },
        ),
        migrations.CreateModel(
            name='AchieveRequirenmentStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completeTime', models.DateTimeField(blank=True, null=True, verbose_name='Время на выполнение')),
                ('isCompleted', models.BooleanField(default=False)),
                ('level', models.IntegerField(default=0, verbose_name='Прогресс уровня')),
                ('quality', models.FloatField(default=0.0, verbose_name='Прогресс качества')),
                ('productivity', models.FloatField(default=0.0, verbose_name='Прогресс продуктивности')),
                ('competitionsCount', models.IntegerField(default=0, verbose_name='Кол-во соревнований')),
                ('competitionWinsCount', models.IntegerField(default=0, verbose_name='Кол-во выиграных соревнований')),
            ],
            options={
                'verbose_name': 'статус получения достижения пользователем',
                'verbose_name_plural': 'статусы получения достижений пользователями',
            },
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, unique=True, verbose_name='Подразделение')),
                ('description', models.CharField(max_length=1000, verbose_name='Описание подразделения сотрудников')),
            ],
            options={
                'verbose_name': 'подразделение',
                'verbose_name_plural': 'подразделения',
            },
        ),
        migrations.CreateModel(
            name='JobPosition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, unique=True, verbose_name='Название должности')),
                ('description', models.CharField(max_length=1000, verbose_name='Описание трудовых обязанностей')),
            ],
            options={
                'verbose_name': 'должность',
                'verbose_name_plural': 'должности',
            },
        ),
        migrations.CreateModel(
            name='MainQuest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('difficulty', models.CharField(choices=[('easy', 'Легко'), ('medium', 'Средне'), ('hard', 'Сложно')], default='easy', max_length=20, verbose_name='Сложность')),
                ('title', models.CharField(max_length=120)),
                ('description', models.CharField(max_length=1000)),
                ('deadline', models.IntegerField(default=0)),
                ('accessLevel', models.IntegerField(default=0)),
                ('tasksCount', models.IntegerField(default=0)),
                ('money', models.IntegerField(default=0, verbose_name='Валюта')),
                ('health', models.IntegerField(default=0, verbose_name='HP')),
                ('energy', models.IntegerField(default=0, verbose_name='Энергия')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.division', verbose_name='Подразделение')),
            ],
            options={
                'verbose_name': 'основной квест',
                'verbose_name_plural': 'основные квесты',
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, verbose_name='Название товара')),
                ('description', models.CharField(max_length=1000, verbose_name='Описание товара')),
                ('count', models.IntegerField(default=0, verbose_name='Кол-во товара')),
                ('photo', models.ImageField(upload_to='', verbose_name='Фото товара')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'товар',
                'verbose_name_plural': 'товары',
            },
        ),
        migrations.CreateModel(
            name='ProductCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, verbose_name='Название товара')),
                ('description', models.CharField(max_length=1000, verbose_name='Описание товара')),
            ],
            options={
                'verbose_name': 'категория товара',
                'verbose_name_plural': 'категории товаров',
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('difficulty', models.CharField(choices=[('easy', 'Легко'), ('medium', 'Средне'), ('hard', 'Сложно')], default='easy', max_length=20, verbose_name='Сложность')),
                ('answerType', models.CharField(choices=[('one_choice', '1 выбор'), ('multi_choice', 'Мультивыбор'), ('enter_number', 'Ввод числа'), ('enter_text', 'Ввод текста')], default='one_choice', max_length=20, verbose_name='Тип ответа')),
                ('title', models.CharField(max_length=120, verbose_name='Вопрос')),
                ('description', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Описание вопроса')),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Картинка для вопроса')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'вопрос',
                'verbose_name_plural': 'вопросы',
            },
        ),
        migrations.CreateModel(
            name='QuestionTheme',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, verbose_name='Название тематики')),
                ('description', models.CharField(max_length=1000, verbose_name='Описание тематики')),
            ],
            options={
                'verbose_name': 'тематика вопроса',
                'verbose_name_plural': 'тематики вопросов',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('difficulty', models.CharField(choices=[('easy', 'Легко'), ('medium', 'Средне'), ('hard', 'Сложно')], default='easy', max_length=20, verbose_name='Сложность')),
                ('taskType', models.CharField(choices=[('daily', 'Ежедневное задание'), ('quest', 'Квест')], default='daily', max_length=20, verbose_name='Тип задания')),
                ('title', models.CharField(max_length=200, unique=True, verbose_name='Название задания')),
                ('description', models.CharField(max_length=1000, verbose_name='Описание задания')),
                ('subTasksCount', models.IntegerField(default=0, verbose_name='Кол-во доп заданий')),
                ('isTeamTask', models.BooleanField(default=False, verbose_name='Групповое задание')),
                ('accessLevel', models.IntegerField(blank=True, null=True)),
                ('deadline', models.IntegerField(blank=True, null=True)),
                ('money', models.IntegerField(default=0, verbose_name='Валюта')),
                ('health', models.IntegerField(default=0, verbose_name='HP')),
                ('energy', models.IntegerField(default=0, verbose_name='Энергия')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Время изменения')),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.division', verbose_name='Подразделение')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.task', verbose_name='Основное')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'задание',
                'verbose_name_plural': 'задания',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, verbose_name='Название команды')),
                ('description', models.CharField(max_length=1000, verbose_name='Описание команды')),
                ('maxUsersCount', models.IntegerField(default=5, verbose_name='Максимальное кол-во участников')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.division', verbose_name='Подразделение')),
            ],
            options={
                'verbose_name': 'команда',
                'verbose_name_plural': 'команды',
            },
        ),
        migrations.CreateModel(
            name='Test',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, verbose_name='Название теста')),
                ('description', models.CharField(max_length=1000, verbose_name='Описание теста')),
                ('pointsToComplete', models.IntegerField(default=10, verbose_name='Кол-во баллов для зачета')),
                ('canLeave', models.BooleanField(default=True, verbose_name='Можно покидать страницу теста')),
                ('canSkip', models.BooleanField(default=True, verbose_name='Можно пропускать вопросы')),
                ('showAnswers', models.BooleanField(default=True, verbose_name='Показывать ответы в конце теста')),
                ('isInterview', models.BooleanField(default=False, verbose_name='Тест для собеседования')),
                ('canSeeSpentTime', models.BooleanField(default=False, verbose_name='Просмотр затраченного времени')),
                ('canSeeTestClosing', models.BooleanField(default=False, verbose_name='Просмотр закрытия теста')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Создан')),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'тест',
                'verbose_name_plural': 'тесты',
            },
        ),
        migrations.CreateModel(
            name='TestUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('started', 'Начат'), ('failed', 'Провален'), ('done', 'Выполнен')], default='started', max_length=20, verbose_name='Сложность')),
                ('rightAnswersCount', models.IntegerField(default=0, verbose_name='Кол-во правильных ответов')),
                ('completeTime', models.DateTimeField(blank=True, null=True, verbose_name='Время выполнения')),
                ('points', models.IntegerField(default=0, verbose_name='Кол-во набранных баллов')),
                ('hasLeftTest', models.BooleanField(default=False, verbose_name='Покидал страницу теста')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Время старта теста')),
                ('done_at', models.DateTimeField(blank=True, null=True, verbose_name='Покидал окончания теста')),
            ],
            options={
                'verbose_name': 'тестовый блок',
                'verbose_name_plural': 'тестовые блоки',
            },
        ),
        migrations.CreateModel(
            name='WeeklyTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('difficulty', models.CharField(choices=[('easy', 'Легко'), ('medium', 'Средне'), ('hard', 'Сложно')], default='easy', max_length=20, verbose_name='Сложность')),
                ('taskType', models.CharField(choices=[('daily', 'Ежедневное задание'), ('quest', 'Квест')], default='daily', max_length=20, verbose_name='Тип задания')),
                ('title', models.CharField(max_length=200, unique=True, verbose_name='Название задания')),
                ('description', models.CharField(max_length=1000, verbose_name='Описание задания')),
                ('subTasksCount', models.IntegerField(default=0, verbose_name='Кол-во доп заданий')),
                ('isTeamTask', models.BooleanField(default=False, verbose_name='Групповое задание')),
                ('accessLevel', models.IntegerField(blank=True, null=True)),
                ('deadline', models.IntegerField(blank=True, null=True)),
                ('money', models.IntegerField(default=0, verbose_name='Валюта')),
                ('health', models.IntegerField(default=0, verbose_name='HP')),
                ('energy', models.IntegerField(default=0, verbose_name='Энергия')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Время изменения')),
                ('division', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.division', verbose_name='Подразделение')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'verbose_name': 'еженедельное задание',
                'verbose_name_plural': 'еженедельные задания',
            },
        ),
        migrations.CreateModel(
            name='WeeklyTaskUserStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subTasksCount', models.IntegerField(default=0, verbose_name='Кол-во доп задач')),
                ('subTasksCompletedCount', models.IntegerField(default=0, verbose_name='Кол-во выполненных доп задач')),
                ('status', models.CharField(choices=[('in_progress', 'В процессе выполнения'), ('completed', 'Выполнено')], default='in_progress', max_length=20, verbose_name='Статус выполнения')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Задача начата')),
                ('done_at', models.DateTimeField(blank=True, null=True, verbose_name='Задача выполнена')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
                ('weeklyTask', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.weeklytask', verbose_name='Задача')),
            ],
            options={
                'verbose_name': 'статус задания отдельного пользователя',
                'verbose_name_plural': 'статусы заданий отдельного пользователя',
            },
        ),
        migrations.CreateModel(
            name='TestUserAnswer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=120, verbose_name='Текст ответа')),
                ('isCorrect', models.BooleanField(default=False, verbose_name='Ответ правильный')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.question', verbose_name='Вопрос')),
                ('testUser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.testuser', verbose_name='Тест, начатый пользователем')),
            ],
            options={
                'verbose_name': 'ответ пользователя',
                'verbose_name_plural': 'ответы пользователей',
            },
        ),
        migrations.AddField(
            model_name='testuser',
            name='answers',
            field=models.ManyToManyField(through='api.TestUserAnswer', to='api.Question', verbose_name='Ответы'),
        ),
        migrations.AddField(
            model_name='testuser',
            name='test',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.test', verbose_name='Тест'),
        ),
        migrations.AddField(
            model_name='testuser',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.CreateModel(
            name='TestBlock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('questionsCount', models.IntegerField(default=3, verbose_name='Кол-во вопросов')),
                ('blockWeight', models.FloatField(default=0.0, verbose_name='Вес блока')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время создания')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('questionTheme', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.questiontheme', verbose_name='Тематика')),
                ('questions', models.ManyToManyField(to='api.Question', verbose_name='Вопросы')),
                ('test', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.test', verbose_name='Тест')),
            ],
            options={
                'verbose_name': 'тестовый блок',
                'verbose_name_plural': 'тестовые блоки',
            },
        ),
        migrations.AddField(
            model_name='test',
            name='users',
            field=models.ManyToManyField(through='api.TestUser', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TeamMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('memberType', models.CharField(choices=[('leader', 'Лидер команды'), ('member', 'Обычный участник'), ('left_team', 'Ушел из команды')], default='member', max_length=20, verbose_name='Тип участника')),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('leftTeam_at', models.DateTimeField(blank=True, null=True)),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.team', verbose_name='Команда')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.AddField(
            model_name='team',
            name='users',
            field=models.ManyToManyField(through='api.TeamMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='TaskUserStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subTasksCount', models.IntegerField(default=0, verbose_name='Кол-во доп задач')),
                ('subTasksCompletedCount', models.IntegerField(default=0, verbose_name='Кол-во выполненных доп задач')),
                ('status', models.CharField(choices=[('in_progress', 'В процессе выполнения'), ('completed', 'Выполнено')], default='in_progress', max_length=20, verbose_name='Статус выполнения')),
                ('started_at', models.DateTimeField(auto_now_add=True, verbose_name='Задача начата')),
                ('done_at', models.DateTimeField(blank=True, null=True, verbose_name='Задача выполнена')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.task', verbose_name='Задача')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'статус задания отдельного пользователя',
                'verbose_name_plural': 'статусы заданий отдельного пользователя',
            },
        ),
        migrations.AddField(
            model_name='task',
            name='users',
            field=models.ManyToManyField(through='api.TaskUserStatus', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='task',
            name='weekly',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.weeklytask', verbose_name='Еженедельное'),
        ),
        migrations.CreateModel(
            name='Statistics',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=0, verbose_name='Уровень')),
                ('quality', models.FloatField(default=0.0, verbose_name='Качество')),
                ('productivity', models.FloatField(default=0.0, verbose_name='Продуктивность')),
                ('completedTests', models.IntegerField(default=0, verbose_name='Кол-во выполненых тестов')),
                ('completedTasks', models.IntegerField(default=0, verbose_name='Кол-во выполненых задач')),
                ('completedQuests', models.IntegerField(default=0, verbose_name='Кол-во выполненых квестов')),
                ('achievements', models.IntegerField(default=0, verbose_name='Кол-во ачивок')),
                ('competitions', models.IntegerField(default=0, verbose_name='Кол-во соревнований')),
                ('competitionWins', models.IntegerField(default=0, verbose_name='Кол-во выиграных соревнований')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Время сбора статистики')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'статистика пользователя',
                'verbose_name_plural': 'статистика пользователей',
            },
        ),
        migrations.CreateModel(
            name='RequirenmentToGetAchieve',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completeTime', models.DateTimeField(blank=True, null=True, verbose_name='Время на выполнение')),
                ('level', models.IntegerField(default=0, verbose_name='Требуемый уровень')),
                ('quality', models.FloatField(default=0.0, verbose_name='Треюуемое качество')),
                ('productivity', models.FloatField(default=0.0, verbose_name='Требуемая продуктивность')),
                ('competitionsCount', models.IntegerField(default=0, verbose_name='Кол-во соревнований')),
                ('competitionWinsCount', models.IntegerField(default=0, verbose_name='Кол-во выиграных соревнований')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.achievement', verbose_name='Ачивка')),
                ('completedAchievement', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.requirenmenttogetachieve', verbose_name='Выполенная другая ачивка')),
                ('completedMainQuest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.mainquest', verbose_name='Выполненный основной квест')),
                ('completedTask', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.task', verbose_name='Выполненная задача')),
                ('completedTest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.test', verbose_name='Выполненный тест')),
                ('completedWeeklyTask', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.weeklytask', verbose_name='Выполненная еженедельная задача')),
                ('users', models.ManyToManyField(through='api.AchieveRequirenmentStatus', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'требование для получения достижения',
                'verbose_name_plural': 'требования для получения достижений',
            },
        ),
        migrations.CreateModel(
            name='RequirementsToGetAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=0, verbose_name='Требуемый уровень')),
                ('quality', models.FloatField(default=0.0, verbose_name='Требуемое качество')),
                ('productivity', models.FloatField(default=0.0, verbose_name='Требуемая продуктивность')),
                ('completedMainQuest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='completedMainQuest', to='api.mainquest', verbose_name='Выполненный основной квест')),
                ('completedTask', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='completedTask', to='api.task', verbose_name='Выполненная задача')),
                ('completedTest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='completedTest', to='api.test', verbose_name='Выполненный тест')),
                ('completedWeeklyTask', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='completedWeeklyTask', to='api.task', verbose_name='Выполненная еженедельная задача')),
                ('mainQuest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.mainquest', verbose_name='Основной квест')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.task', verbose_name='Задача')),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.test', verbose_name='Тест')),
                ('weeklyTask', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.weeklytask', verbose_name='Еженедельная задача')),
            ],
            options={
                'verbose_name': 'требование для получения доступа',
                'verbose_name_plural': 'требования для получения доступа',
            },
        ),
        migrations.CreateModel(
            name='RequirementsToComplete',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=0, verbose_name='Требуемый уровень')),
                ('quality', models.FloatField(default=0.0, verbose_name='Требуемое качество')),
                ('productivity', models.FloatField(default=0.0, verbose_name='Требуемая продуктивность')),
                ('doneMainQuest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doneMainQuest', to='api.mainquest', verbose_name='Выполненный основной квест')),
                ('doneTask', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doneTask', to='api.task', verbose_name='Выполненная задача')),
                ('doneTest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doneTest', to='api.test', verbose_name='Выполненный тест')),
                ('doneWeeklyTask', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='doneWeeklyTask', to='api.task', verbose_name='Выполненная еженедельная задача')),
                ('mainQuest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.mainquest', verbose_name='Основной квест')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.task', verbose_name='Задача')),
                ('test', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.test', verbose_name='Тест')),
                ('weeklyTask', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.weeklytask', verbose_name='Еженедельная задача')),
            ],
            options={
                'verbose_name': 'требование для выполнения',
                'verbose_name_plural': 'требования для выполнения',
            },
        ),
        migrations.CreateModel(
            name='RequirementsToBuyProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField(default=0, verbose_name='Требуемый уровень')),
                ('quality', models.FloatField(default=0.0, verbose_name='Требуемое качество')),
                ('productivity', models.FloatField(default=0.0, verbose_name='Требуемая продуктивность')),
                ('money', models.IntegerField(default=0, verbose_name='Кол-во Валюты')),
                ('health', models.IntegerField(default=0, verbose_name='Кол-во HP')),
                ('energy', models.IntegerField(default=0, verbose_name='Кол-во Энергии')),
                ('completedMainQuest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.mainquest', verbose_name='Основной квест')),
                ('completedTask', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.task', verbose_name='Задача')),
                ('completedTest', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.test', verbose_name='Тест')),
                ('completedWeeklyTask', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.weeklytask', verbose_name='Еженедельная задача')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.product', verbose_name='Категория товара')),
            ],
            options={
                'verbose_name': 'требование для получения товара',
                'verbose_name_plural': 'требования для получения товаров',
            },
        ),
        migrations.AddField(
            model_name='question',
            name='questionTheme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.questiontheme', verbose_name='Тематика'),
        ),
        migrations.AddField(
            model_name='question',
            name='tags',
            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('productCount', models.IntegerField(default=0, verbose_name='Кол-во покупаемых товаров')),
                ('status', models.CharField(choices=[('pending', 'оформляется'), ('paid', 'оплачен'), ('expects', 'оможно забрать'), ('received', 'получен')], default='pending', max_length=20, verbose_name='Размер')),
                ('products', models.ManyToManyField(to='api.Product', verbose_name='Товары')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='productCategory',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.productcategory', verbose_name='Категория товара'),
        ),
        migrations.CreateModel(
            name='MainQuestTree',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('treeLevel', models.IntegerField(default=0)),
                ('treePosition', models.IntegerField(default=0)),
                ('childTask', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='childTask', to='api.task')),
                ('mainQuest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.mainquest')),
                ('parentTask', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parentTask', to='api.task')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.task')),
            ],
            options={
                'verbose_name': 'дерево основной квест',
                'verbose_name_plural': 'деревья основных квестов',
            },
        ),
        migrations.CreateModel(
            name='MainQuestStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('inprogress', 'В процессе выполнения'), ('completed', 'Выполнено')], default='inprogress', max_length=20, verbose_name='Статус выполнения')),
                ('completeTime', models.DateTimeField(blank=True, null=True)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('done_at', models.DateTimeField(blank=True, null=True)),
                ('mainQuest', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.mainquest', verbose_name='Основной квест')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'статус основного квеста пользователя',
                'verbose_name_plural': 'статусы основных квестов пользователей',
            },
        ),
        migrations.AddField(
            model_name='mainquest',
            name='tasks',
            field=models.ManyToManyField(through='api.MainQuestTree', to='api.Task'),
        ),
        migrations.AddField(
            model_name='mainquest',
            name='users',
            field=models.ManyToManyField(through='api.MainQuestStatus', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Competition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('isCompleted', models.BooleanField(default=False)),
                ('deadline', models.DateTimeField(blank=True, null=True)),
                ('levelCriterion', models.IntegerField(default=0, verbose_name='Требуемый уровень')),
                ('qualityCriterion', models.FloatField(default=0.0, verbose_name='Треюуемое качество')),
                ('productivityCriterion', models.FloatField(default=0.0, verbose_name='Требуемая продуктивность')),
                ('money', models.IntegerField(default=0, verbose_name='Валюта')),
                ('health', models.IntegerField(default=0, verbose_name='HP')),
                ('energy', models.IntegerField(default=0, verbose_name='Энергия')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('done_at', models.DateTimeField(blank=True, null=True)),
                ('users', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
                ('winner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='winner', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'соревнование',
                'verbose_name_plural': 'соревнования',
            },
        ),
        migrations.CreateModel(
            name='CategoryClothes',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('size', models.CharField(choices=[('s', 'S'), ('m', 'M'), ('xl', 'XL')], default='s', max_length=20, verbose_name='Размер')),
                ('gender', models.CharField(choices=[('male', 'мужское'), ('female', 'женское'), ('all', 'для всех')], default='male', max_length=20, verbose_name='Пол')),
                ('clothesType', models.CharField(choices=[('tshirt', 'футболка'), ('sweater', 'свитер'), ('jeans', 'джинсы'), ('cap', 'кепка')], default='tshirt', max_length=20, verbose_name='Тип одежды')),
                ('color', models.CharField(max_length=7, verbose_name='Цвет')),
                ('product', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='api.product', verbose_name='Товар')),
            ],
            options={
                'verbose_name': 'покупка',
                'verbose_name_plural': 'покупки',
            },
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=120, verbose_name='Ответ')),
                ('description', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Доп описание ответа')),
                ('image', models.ImageField(blank=True, null=True, upload_to='', verbose_name='Картинка, дополняющая ответ')),
                ('isCorrect', models.BooleanField(default=False, verbose_name='Правильный ответ')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.question', verbose_name='Вопрос')),
            ],
            options={
                'verbose_name': 'ответ',
                'verbose_name_plural': 'ответы',
            },
        ),
        migrations.AddField(
            model_name='achieverequirenmentstatus',
            name='requirenmentToGetAchieve',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.requirenmenttogetachieve', verbose_name='Требование для получения ачивки'),
        ),
        migrations.AddField(
            model_name='achieverequirenmentstatus',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь'),
        ),
        migrations.CreateModel(
            name='AchievementUserStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('completed_at', models.DateTimeField(auto_now_add=True, verbose_name='Время получения')),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.achievement', verbose_name='Ачивка')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
            options={
                'verbose_name': 'статус получения достижения',
                'verbose_name_plural': 'статусы получения достижений',
            },
        ),
        migrations.AddField(
            model_name='achievement',
            name='users',
            field=models.ManyToManyField(through='api.AchievementUserStatus', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='division',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.division', verbose_name='Подразделение'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='jobPosition',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.jobposition', verbose_name='Должность'),
        ),
    ]
